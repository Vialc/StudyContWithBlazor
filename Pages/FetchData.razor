@page "/fetchdata"
@using EndToEnd.Data
@using EndToEndDB.Data.EndToEnd
@inject AuthenticationStateProvider AuthenticationStateProvider
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
    Otherwise DbContext in ForecastService will live for the life of the
    connection, which may be problematic if clients stay
    connected for a long time.
    We access ActiviesService using @Service
*@
@inherits OwningComponentBase<ActiviesService>
<h1>Registrar Atividades</h1>
<!-- AuthorizeView allows us to only show sections of the page -->
<!-- based on the security on the current user -->
<AuthorizeView>
    <!-- Show this section if the user is logged in -->
    <Authorized>
        <h4>Hello, @context.User.Identity?.Name!</h4>
        @if (forecasts == null)
        {
            <!-- Show this if the current user has no data... yet... -->
            <p><em>Loading...</em></p>
        }
        else
        {
            <!-- Show the forecasts for the current user -->
            <table class="table">
                <thead>
                    <tr>
                        <th>Data</th>
                        <th>Matéria</th>
                        <th>Tempo de Estudo</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forecast in forecasts)
                    {
                        <tr>
                            <td>@forecast.Date.ToShortDateString()</td>
                            <td>@forecast.Subject</td>
                            <td>@forecast.TimeCount</td>
                            <td>
                                <!-- Edit the current forecast -->
                                <button class="btn btn-primary"
                                @onclick="(() => EditForecast(forecast))">
                                Edit
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <p>
            <!-- Add a new forecast -->
            <button class="btn btn-success"
                    @onclick="AddNewForecast">
                    Add New Forecast
                </button>
            </p>
        @if (ShowPopup)
        {
            <!-- This is the popup to create or edit a forecast -->                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">Inserir Nova Contagem</h3>
                                <!-- Button to close the popup -->
                                <button type="button" class="close"
                                @onclick="ClosePopup">
                                    <span aria-hidden="true">X</span>
                                </button>
                            </div>
                            <!-- Edit form for the current forecast -->
                            <div class="modal-body">
                                <input class="form-control" type="text"
                                placeholder="Matéria"
                               @bind="objActivies.Subject" />
                                <br />
                                <!--StopWatch Section-->
                                <p role="status">Tempo de Estudo: @currentCount</p>
                                <button class="btn btn-start" @onclick="async () => await IncrementCount() ">Começar Contagem</button>
                                <button class="btn btn-pause" @onclick="() => { ligado = false; }">Pausa para o café</button>
                                <!-- Button to save the forecast -->
                                <button class="btn btn-finish"
                                @onclick="SaveForecast">
                                    Encerrar
                                </button>&nbsp;
                                <!-- Only show delete button if not a new record -->
                                @if (objActivies.Id > 0)
                                {                                    
                                    <!-- Button to delete the forecast -->
                                    <button class="btn btn-danger"
                                    @onclick="DeleteForecast">
                                    Delete
                                </button>
                                }
                             </div>
                        </div>
                    </div>
                </div>
            }
        }
        
    </Authorized>
    <!-- Show this section if the user is not logged in -->
    <NotAuthorized>
        <p>You're not signed in.</p>
    </NotAuthorized>
    @code 
    {
        TimeSpan currentCount = new TimeSpan();
    public bool ligado;

    // AuthenticationState is available as a CascadingParameter
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    List<Activies> forecasts = new List<Activies>();
    private string UserIdentityName = "";
    protected override async Task OnInitializedAsync()
    {
        // Get the current user
        if (authenticationStateTask != null)
        {
            var user = (await authenticationStateTask).User;
            if (user.Identity != null)
            {
                UserIdentityName = user.Identity.Name ?? "";
            }
        }
        // Get the forecasts for the current user
        // We access ActiviesService using @Service
        forecasts = await @Service.GetForecastAsync(UserIdentityName);
    }
    Activies objActivies = new Activies();
    bool ShowPopup = false;
    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }
    void AddNewForecast()
    {
        // Make new forecast
        objActivies = new Activies();
        // Set Id to 0 so we know it is a new record
        objActivies.Id = 0;
        // Open the Popup
        ShowPopup = true;
    }
    async Task SaveForecast()
    {
        // Close the Popup
        ShowPopup = false;
        // A new forecast will have the Id set to 0
        if (objActivies.Id == 0)
        {
            // Create new forecast
            Activies objNewActivies = new Activies();
            objNewActivies.Date = System.DateTime.Now;
            objNewActivies.Subject =
            Convert.ToString(objActivies.Subject);
            objNewActivies.TimeCount =
            currentCount;
            objNewActivies.UserName = UserIdentityName;
            // Save the result
            var result =
            @Service.CreateForecastAsync(objNewActivies);
            ligado = false;
            currentCount = new TimeSpan();

        }
        else
        {
            // This is an update
            var result =
            @Service.UpdateForecastAsync(objActivies);
        }
        // Get the forecasts for the current user
        forecasts =
        await @Service.GetForecastAsync(UserIdentityName);
    }
    void EditForecast(Activies Activies)
    {
        // Set the selected forecast
        // as the current forecast
        objActivies = Activies;
        // Open the Popup
        ShowPopup = true;
    }
    async Task DeleteForecast()
    {
        // Close the Popup
        ShowPopup = false;
        // Delete the forecast
        var result = @Service.DeleteForecastAsync(objActivies);
        // Get the forecasts for the current user
        forecasts =
        await @Service.GetForecastAsync(UserIdentityName);
    }

    async Task IncrementCount()
    {   
       if (ligado != true)
       {
        ligado = true;
            while (ligado)
                {
                await Task.Delay(1000);
                if (ligado)
            {
                currentCount = currentCount.Add(new TimeSpan(0, 0, 1));
                StateHasChanged();
            }
                }
       }
    }  

}
</AuthorizeView>